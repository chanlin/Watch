package com.jajale.watch.activity;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.AdapterView;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.SeekBar;import android.widget.TextView;import com.jajale.watch.BaseActivity;import com.jajale.watch.R;import com.jajale.watch.adapter.TrackListViewAdapter;import com.jajale.watch.cviews.PullRefreshListView;import com.jajale.watch.image.JJLImageLoader;import com.jajale.watch.utils.CMethod;import com.jajale.watch.utils.L;import com.jajale.watch.utils.LoadingDialog;import com.jajale.watch.utils.MyTimerUtil;import com.jajale.watch.utils.T;import com.ximalaya.ting.android.opensdk.constants.DTransferConstants;import com.ximalaya.ting.android.opensdk.datatrasfer.CommonRequest;import com.ximalaya.ting.android.opensdk.datatrasfer.IDataCallBack;import com.ximalaya.ting.android.opensdk.model.PlayableModel;import com.ximalaya.ting.android.opensdk.model.track.Track;import com.ximalaya.ting.android.opensdk.model.track.TrackList;import com.ximalaya.ting.android.opensdk.player.XmPlayerManager;import com.ximalaya.ting.android.opensdk.player.service.IXmPlayerStatusListener;import com.ximalaya.ting.android.opensdk.player.service.XmPlayerException;import java.util.HashMap;import java.util.List;import java.util.Map;import butterknife.ButterKnife;public class XMLYPlayActivity extends BaseActivity implements IXmPlayerStatusListener, PullRefreshListView.PullRefreshListener, AdapterView.OnItemClickListener, OnClickListener {    TrackListViewAdapter adapter;    private int mCurrentPageNum = 1;    private XmPlayerManager mPlayerManager;    private boolean mUpdateProgress = true;    private String albumID;    private String albumtitle;    private List<Track> mTrackList;    private int mCurPlayTrackListSize = 0;    private String aobumurl;    long lastListenID;    private CommonRequest mXimalaya;    private String mAppSecret = "1dd13280298914de5af0408261b74b31";    TextView midTitle;    TextView current_title_tv;    SeekBar progress_sb;    PullRefreshListView program_listView;    TextView all_time_tv;    TextView current_time_tv;    ImageButton play_or_pause_btn;    ImageView sound_cover;    ImageView title_bar_terminal_icon_iv;    TextView title_bar_terminal_name_tv;    TextView title_bar_title_tv;    ImageView title_bar_right_iv;    private ImageButton pre_sound_btn;    private ImageButton next_sound_btn;    int mCurrentIndex=0;    private LoadingDialog loadingDialog;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_xmlay_play);        ButterKnife.inject(this);        bindXMLY();        initView();        initTitle();        setupView();    }    private void bindXMLY() {        //初始化喜马拉雅SDK        mXimalaya = CommonRequest.getInstanse();        mXimalaya.init(XMLYPlayActivity.this, mAppSecret);        mXimalaya.setDefaultPagesize(50);    }    private void initView() {        loadingDialog = new LoadingDialog(this);        current_title_tv = (TextView) findViewById(R.id.current_title_tv);        progress_sb = (SeekBar) findViewById(R.id.progress_sb);        program_listView = (PullRefreshListView) findViewById(R.id.program_list);        all_time_tv = (TextView) findViewById(R.id.all_time_tv);        current_time_tv = (TextView) findViewById(R.id.current_time_tv);        sound_cover = (ImageView) findViewById(R.id.sound_cover);        title_bar_terminal_icon_iv = (ImageView) findViewById(R.id.title_bar_terminal_icon_iv);        title_bar_terminal_name_tv = (TextView) findViewById(R.id.title_bar_terminal_name_tv);        title_bar_title_tv = (TextView) findViewById(R.id.title_bar_title_tv);        title_bar_right_iv = (ImageView) findViewById(R.id.title_bar_right_iv);        play_or_pause_btn = (ImageButton) findViewById(R.id.play_or_pause_btn);        pre_sound_btn = (ImageButton) findViewById(R.id.pre_sound_btn);        next_sound_btn = (ImageButton) findViewById(R.id.next_sound_btn);        play_or_pause_btn.setOnClickListener(this);        pre_sound_btn.setOnClickListener(this);        next_sound_btn.setOnClickListener(this);    }    private void setupView() {        Intent intent = getIntent();        albumtitle = intent.getStringExtra("albumtitle");        albumID = intent.getStringExtra("albumID");        aobumurl = intent.getStringExtra("albumpicurl");        lastListenID = intent.getLongExtra("lastListenID", -1);        midTitle.setText(albumtitle);        L.i("guokm", "albumID:" + albumID + "--lastListenID:" + lastListenID + "----aobumurl:" + aobumurl);        adapter = new TrackListViewAdapter(this,aobumurl);        program_listView.setAdapter(adapter);        program_listView.setCanRefresh(false);        program_listView.setCanLoadMore(true);        program_listView.setOnItemClickListener(this);        program_listView.setPullRefreshListener(this);        progress_sb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {            @Override            public void onStopTrackingTouch(SeekBar seekBar) {                mPlayerManager.seekToByPercent(seekBar.getProgress()                        / (float) seekBar.getMax());                mUpdateProgress = true;            }            @Override            public void onStartTrackingTouch(SeekBar seekBar) {                mUpdateProgress = false;            }            @Override            public void onProgressChanged(SeekBar seekBar, int progress,                                          boolean fromUser) {            }        });        initXMLYPlayerManager();        getAlbumTracks(albumID, 1);/*            if (mPlayerManager.hasPreSound()) {                pre_sound_btn.setImageResource(R.drawable.pre_icon_transparent_normal);            }else {                pre_sound_btn.setImageResource(R.drawable.pre_icon_transparent_no);            }*/    }    private void initTitle() {        View title = findViewById(R.id.title);        midTitle = (TextView) title.findViewById(R.id.tv_middle);        ImageView iv_left = (ImageView) title.findViewById(R.id.iv_left);        iv_left.setImageResource(R.drawable.title_goback_selector);        iv_left.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });    }    private boolean isLoadMore = false;    private void getAlbumTracks(String albumID, int pageNum) {        loadingDialog.show();        Map<String, String> map = new HashMap<String, String>();        map.put(DTransferConstants.ALBUM_ID, albumID);        map.put(DTransferConstants.SORT, "asc");        map.put(DTransferConstants.PAGE, pageNum + "");        CommonRequest.getTracks(map, new IDataCallBack<TrackList>() {            @Override            public void onSuccess(TrackList object) {                loadingDialog.dismiss();                List<Track> trackList = object.getTracks();                if (trackList.size() != 0) {                    if (mTrackList != null) {                        mTrackList.addAll(trackList);                    } else {                        mTrackList = trackList;                    }                    adapter.setData(trackList);                    adapter.notifyDataSetChanged();                    program_listView.onLoadMoreComplete();                    if (!isLoadMore) {      //首次进入时播放的页面                        mPlayerManager.playList(trackList, 0);                        mCurPlayTrackListSize = trackList.size();//                        mPlayerManager.play(0);                    } else {                        mPlayerManager.setPlayList(mTrackList, mCurrentIndex - 1);                    }                }            }            @Override            public void onError(int code, String message) {                loadingDialog.dismiss();                T.s(getString(R.string.net_poor));                L.i("guokm", code + ":" + message);            }        });    }    private void initXMLYPlayerManager() {        mPlayerManager = XmPlayerManager.getInstance(this);        mPlayerManager.init();        mPlayerManager.addPlayerStatusListener(this);    }    @Override    public void onPlayStart() {        play_or_pause_btn.setSelected(true);    }    @Override    public void onPlayPause() {        play_or_pause_btn.setSelected(false);    }    @Override    public void onPlayStop() {    }    @Override    public void onSoundPlayComplete() {    }    @Override    public void onSoundPrepared() {    }//    int mCurrentIndex = 0;//    mCurrentIndex=0;    @Override    public void onSoundSwitch(PlayableModel lastModel, PlayableModel currentModel) {        PlayableModel model = mPlayerManager.getCurrSound();        mCurrentIndex = mPlayerManager.getCurrentIndex() + 1;        if (model != null) {            if (model instanceof Track) {                Track info = (Track) model;                progress_sb.setMax(100);                String tackTitle = info.getTrackTitle();                current_title_tv.setText(tackTitle);                current_title_tv.setSelected(true);                Uri uri = Uri.parse(info.getCoverUrlSmall());                if (CMethod.isEmpty(uri.toString())){                    //item没给歌曲图，则获取专辑图做播放器封面                    L.i("guokm","aobumurl:----"+aobumurl);                    JJLImageLoader.downloadRoundImage(this, aobumurl, sound_cover);                }else {                    JJLImageLoader.downloadRoundImage(this, uri.toString(), sound_cover);                }                adapter.setViewSelect(mCurrentIndex - 1);                setPlayBtnStatus();            }        }    }    /**     * 上一曲，下一曲按钮状态更新     */    private void setPlayBtnStatus() {        if (mPlayerManager.hasPreSound()) {            pre_sound_btn.setImageResource(R.drawable.pre_icon_transparent_normal);        } else {            pre_sound_btn.setImageResource(R.drawable.pre_icon_transparent_no);        }        if (mPlayerManager.hasNextSound()) {            next_sound_btn.setImageResource(R.drawable.next_icon_transparent_normal);        } else {            next_sound_btn.setImageResource(R.drawable.next_icon_transparent_no);        }    }    @Override    public void onBufferingStart() {    }    @Override    public void onBufferingStop() {    }    @Override    public void onBufferProgress(int i) {    }    @Override    public void onPlayProgress(int currPos, int duration) {        if (mUpdateProgress && duration != 0) {            current_time_tv.setText(MyTimerUtil.formatTime(currPos));            all_time_tv.setText(MyTimerUtil.formatTime(duration));            progress_sb.setProgress((int) (100 * currPos / (float) duration));        }//当前页播放完自动切换到下一页        if (mCurrentIndex == mCurPlayTrackListSize && currPos == duration - 100) {                onLoadMore();        }    }    @Override    public boolean onError(XmPlayerException e) {//  MyLogger.kLog().i(e.toString());        return false;    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        mPlayerManager.play(position - 1);    }/*    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN:                int x = (int) ev.getX();                int y = (int) ev.getY();                Rect rect = new Rect();                program_listView.getGlobalVisibleRect(rect);                if (rect.contains(x, y)) {                    adapter.notifyDataSetChanged();                }                break;            case MotionEvent.ACTION_MOVE:                break;        }        return super.dispatchTouchEvent(ev);    }*/    @Override    protected void onDestroy() {        mPlayerManager.release();        super.onDestroy();    }    @Override    public void onRefresh() {        if (mCurrentPageNum - 1 <= 0) {            mCurrentPageNum = 1;        } else {            mCurrentPageNum = mCurrentPageNum - 1;        }        getAlbumTracks(albumID, mCurrentPageNum);    }    @Override    public void onLoadMore() {//        MyLogger.kLog().i("albumID:" + mCurrentPageNum);        mCurrentPageNum = mCurrentPageNum + 1;        getAlbumTracks(albumID, mCurrentPageNum);        isLoadMore = true;    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.play_or_pause_btn:                L.i("guokm","com");                if (mPlayerManager.isPlaying()) {                    play_or_pause_btn.setSelected(false);//                    mPlayerManager.stop();                    mPlayerManager.pause();                } else {                    mPlayerManager.play();                    play_or_pause_btn.setSelected(true);                }                break;            case R.id.pre_sound_btn:                if (mPlayerManager.hasPreSound()) {                    mPlayerManager.playPre();                }                break;            case R.id.next_sound_btn:                mPlayerManager.playNext();                break;        }    }    @Override    protected void onPause() {        if (mPlayerManager!=null&&mPlayerManager.isPlaying()) {            play_or_pause_btn.setSelected(false);//                    mPlayerManager.stop();            mPlayerManager.pause();        }        super.onPause();    }    @Override    protected void onResume() {        if (mPlayerManager!=null&&!mPlayerManager.isPlaying()) {            mPlayerManager.play();            play_or_pause_btn.setSelected(true);        }        super.onResume();    }}